# Problem 2 : Even Fibonacci Numbers
# Each new term in the Fibonacci sequence is generated by
# adding the previous two terms. By starting with 1 and 2,
# the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34
# 55, 89, ... By considering the terms in the Fibonacci
# sequence whose values do not exceed four million, find
# the sum of the even-valued terms.
# ANSWER : 4613732



# WHAT I LEARNED
# - How to generate the Fibonacci sequence using a while loop and multiple tracking variables
# - How to sum selected values from a sequence
# - How to store and process data using lists
# - That using fewer variables and skipping list storage (like in the optimized version) can improve memory usage and performance
# - The importance of clearly updating multiple variables when generating sequences



# MY CODE
# highest-value must be greater than 2
def sum_even_fibonacci_numbers(highest_value):
    first = 1
    second = 2
    fibonacci_numbers = [1, 2]
    evens_sum = 0
    
    while (first + second < highest_value):
        fibonacci_numbers.append(first + second)
        temp = second
        second = first + second
        first = temp
    #print(fibonacci_numbers)

    for x in fibonacci_numbers:
        if x % 2 == 0:
            evens_sum += x

    return evens_sum

print(sum_even_fibonacci_numbers(100)) #44
print(sum_even_fibonacci_numbers(4000000)) #4613732



# CHATGPT'S OPTIMIZED VERSION
def GPTsum_even_fibonacci_numbers(highest_value):
    first = 1
    second = 2
    evens_sum = 0
    
    while second < highest_value:
        if second % 2 == 0:
            evens_sum += second
        # Generate the next Fibonacci number
        next_fib = first + second
        first = second
        second = next_fib
    
    return evens_sum

print(GPTsum_even_fibonacci_numbers(100))      # Output: 44
print(GPTsum_even_fibonacci_numbers(4000000))  # Output: 4613732